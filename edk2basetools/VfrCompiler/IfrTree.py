## @file
# The file is used to define vfr tree structure and related operations.
#
# Copyright (c) 2022-, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

import Common.EdkLogger as EdkLogger
from Common.BuildToolError import *
from VfrCompiler.IfrCtypes import *
from VfrCompiler.IfrFormPkg import *
from VfrCompiler.IfrUtility import gVfrBufferConfig
from VfrCompiler.IfrPreProcess import PreProcessDB, Options


VFR_COMPILER_VERSION = "2.01 (UEFI 2.4)"
BUILD_VERSION = "Developer Build based on Revision: Unknown"
BYTES_PRE_LINE = 0x10


# Ifr related Info -> ctypes obj
# conditional Info
# Structure Info
class IfrTreeNode:
    def __init__(self, OpCode=None, Data=None, Buffer=None, Position=None):
        self.OpCode = OpCode
        self.Data = Data
        self.Buffer = Buffer
        self.Position = Position
        self.Condition = None
        self.Expression = None
        self.Dict = {}
        self.Offset = None
        self.Parent = None
        self.Child = []
        self.Level = -1

    def hasCondition(self):
        return self.Condition

    def hasChild(self):
        return self.Child == []

    def isFinalChild(self):
        ParTree = self.Parent
        if ParTree and ParTree.Child[-1] == self:
            return True
        return False

    def insertChild(self, NewNode, pos: int = None):
        if NewNode is not None:
            if not pos:
                self.Child.append(NewNode)
            else:
                self.Child.insert(pos, NewNode)

            NewNode.Parent = self

    def insertRel(self, newNode):
        if self.Parent:
            parentTree = self.Parent
            new_index = parentTree.Child.index(self) + 1
            parentTree.Child.insert(new_index, newNode)
        self.NextRel = newNode
        newNode.LastRel = self

    def deleteNode(self, deletekey: str):
        FindStatus, DeleteTree = self.FindNode(deletekey)
        if FindStatus:
            parentTree = DeleteTree.Parent
            lastTree = DeleteTree.LastRel
            nextTree = DeleteTree.NextRel
            if parentTree:
                index = parentTree.Child.index(DeleteTree)
                del parentTree.Child[index]
            if lastTree and nextTree:
                lastTree.NextRel = nextTree
                nextTree.LastRel = lastTree
            elif lastTree:
                lastTree.NextRel = None
            elif nextTree:
                nextTree.LastRel = None
            return DeleteTree
        return None


ExpOps = [
    EFI_IFR_DUP_OP,
    EFI_IFR_EQ_ID_VAL_OP,
    EFI_IFR_QUESTION_REF1_OP,
    EFI_IFR_EQ_ID_VAL_OP,
    EFI_IFR_EQ_ID_ID_OP,
    EFI_IFR_EQ_ID_VAL_LIST_OP,
    EFI_IFR_RULE_REF_OP,
    EFI_IFR_STRING_REF1_OP,
    EFI_IFR_THIS_OP,
    EFI_IFR_SECURITY_OP,
    EFI_IFR_GET_OP,
    EFI_IFR_TRUE_OP,
    EFI_IFR_FALSE_OP,
    EFI_IFR_ONE_OP,
    EFI_IFR_ONES_OP,
    EFI_IFR_ZERO_OP,
    EFI_IFR_UNDEFINED_OP,
    EFI_IFR_VERSION_OP,
    EFI_IFR_UINT64_OP,
    EFI_IFR_QUESTION_REF2_OP,
    EFI_IFR_QUESTION_REF3_OP,
    EFI_IFR_SET_OP,
    EFI_IFR_DEFAULTSTORE_OP,
    EFI_IFR_OR_OP,
]

DefaultDictList = []


class ReCordNode(Structure):
    def __init__(self, Record, LineNo):
        self.Record = Record
        self.LineNo = LineNo


class IfrTree:
    def __init__(self, Root: IfrTreeNode, PreProcessDB: PreProcessDB, Options: Options) -> None:
        self.Root = Root
        self.Options = Options
        self.PreProcessDB = PreProcessDB

    def GenBinaryFiles(self):
        RecordLines = []
        HpkFile = self.Options.PkgOutputFileName
        CFile = self.Options.COutputFileName
        LstFile = self.Options.RecordListFileName
        if self.Options.CreateIfrPkgFile:
            # GenBinary
            PkgHdr = gFormPkg.BuildPkgHdr()
            try:
                with open(HpkFile, "wb") as Hpk:
                    Hpk.write(gFormPkg.StructToStream(PkgHdr))
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler", FILE_OPEN_FAILURE, f"File open failed for {HpkFile}: {e}"
                )

            # GenCFile
            try:
                with open(CFile, "w") as C:
                    C.write("//\n")
                    C.write("//" + " " + "DO NOT EDIT -- auto-generated file\n")
                    C.write("//\n")
                    C.write("//" + " " + "This file is generated by the vfrcompiler utility\n")
                    C.write("//\n\n")
                    BaseName = "unsigned char " + self.Options.BaseFileName + "Bin[] = {\n"
                    C.write(BaseName)
                    C.write("  // ARRAY LENGTH\n\n")
                    PkgLength = PkgHdr.Length + sizeof(c_uint32)
                    for B in PkgLength.to_bytes(4, byteorder="little", signed=True):
                        C.write("  0x%02X," % B)
                    C.write("\n\n")
                    C.write("  // PACKAGE HEADER\n\n")
                    HeaderBuffer = gFormPkg.StructToStream(PkgHdr)
                    for B in HeaderBuffer:
                        C.write("  0x%02X," % B)
                    C.write("\n\n")
                    C.write("  //" + " " + "PACKAGE DATA\n\n")
                    self.Index = 0
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler", FILE_OPEN_FAILURE, f"File open failed for {CFile}: {e}"
                )

        if self.Options.CreateRecordListFile:
            # GenRecordList
            try:
                with open(LstFile, "w") as Lst:
                    Lst.write(
                        f"//\n//  VFR compiler version {VFR_COMPILER_VERSION} {BUILD_VERSION}\n//\n"
                    )
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler", FILE_OPEN_FAILURE, f"File open failed for {LstFile}: {e}"
                )

        self._GenBinaryFilesDfs(self.Root, HpkFile, CFile, RecordLines)

        if self.Options.CreateIfrPkgFile:
            # GenCFile
            try:
                with open(CFile, "a") as C:
                    C.write("\n};\n")
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler", FILE_WRITE_FAILURE, f"File write failed for {CFile}: {e}", None
                )

        if self.Options.CreateRecordListFile:
            # GenRecordList
            InFileLines = []
            try:
                with open(self.Options.CProcessedVfrFileName, "r") as In:
                    for Line in In:
                        InFileLines.append(Line)
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler",
                    FILE_OPEN_FAILURE,
                    f"File open failed for {self.Options.CProcessedVfrFileName}: {e}",
                    None,
                )
            try:
                with open(LstFile, "a") as Lst:
                    InsertedLine = 0
                    for RecordLine in RecordLines:
                        InFileLines.insert(RecordLine.LineNo + InsertedLine, RecordLine.Record)
                        InsertedLine += 1
                    for Line in InFileLines:
                        Lst.write(f"{Line}")
                    Lst.write("//\n//  All Opcode Record List\n//\n")
                    for RecordLine in RecordLines:
                        Lst.write(f"{RecordLine.Record}")
                    Lst.write(f"\nTotal Size of all record is {gFormPkg.Offset:0>8x}")
                    gVfrVarDataTypeDB.Dump(Lst)
            except Exception as e:
                EdkLogger.error(
                    "VfrCompiler", FILE_WRITE_FAILURE, f"File write failed for {LstFile}: {e}", None
                )

    def _GenBinaryFilesDfs(self, Root, HpkFile, CFile, RecordLines):
        if Root is None:
            return

        if Root.OpCode is not None:
            if Root.OpCode in ExpOps:
                # The Data is likely to be modified, so generate buffer here
                Root.Buffer = gFormPkg.StructToStream(Root.Data.GetInfo())
            if Root.Buffer is not None:
                if self.Options.CreateIfrPkgFile and self.Options.CreateRecordListFile:
                    try:
                        with open(HpkFile, "ab") as Hpk:
                            Hpk.write(Root.Buffer)
                    except Exception:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.PkgOutputFileName),
                        )

                    try:
                        with open(CFile, "a") as C:
                            LineBuffer = ""
                            for i in range(0, len(Root.Buffer)):
                                self.Index += 1
                                Data = Root.Buffer[i]
                                if self.Index % BYTES_PRE_LINE == 1:
                                    C.write("  ")
                                C.write("0x%02X" % Data)
                                if self.Index != gFormPkg.PkgLength:
                                    if self.Index % BYTES_PRE_LINE == 0:
                                        C.write(",\n")
                                    else:
                                        C.write(",  ")

                                LineBuffer += f"{Root.Buffer[i]:0>2X} "

                            Record = f">{Root.Offset:0>8X}: {LineBuffer}\n"
                            LineNo = Root.Data.GetLineNo()
                            RecordLines.append(ReCordNode(Record, LineNo))
                    except Exception:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.COutputFileName),
                        )

                if self.Options.CreateIfrPkgFile and not self.Options.CreateRecordListFile:
                    try:
                        with open(HpkFile, "ab") as Hpk:
                            Hpk.write(Root.Buffer)
                    except Exception:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.PkgOutputFileName),
                        )

                    try:
                        with open(CFile, "a") as C:
                            for i in range(0, len(Root.Buffer)):
                                self.Index += 1
                                Data = Root.Buffer[i]
                                if self.Index % BYTES_PRE_LINE == 1:
                                    C.write("  ")
                                C.write("0x%02X" % Data)
                                if self.Index != gFormPkg.PkgLength:
                                    if self.Index % BYTES_PRE_LINE == 0:
                                        C.write(",\n")
                                    else:
                                        C.write(",  ")
                    except Exception as e:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            f"File write failed for {self.Options.COutputFileName} : {e}",
                        )

                if not self.Options.CreateIfrPkgFile and self.Options.CreateRecordListFile:
                    LineBuffer = ""
                    for i in range(0, len(Root.Buffer)):
                        LineBuffer += f"{Root.Buffer[i]:0>2X} "
                    Record = f">{Root.Offset:0>8X}: {LineBuffer}\n"
                    LineNo = Root.Data.GetLineNo()
                    RecordLines.append(ReCordNode(Record, LineNo))

        if Root.Child != []:
            for ChildNode in Root.Child:
                self._GenBinaryFilesDfs(ChildNode, HpkFile, CFile, RecordLines)

    def GenRecordListFile(self):
        FileName = self.Options.RecordListFileName
        RecordLines = []
        self._GenRecordListFileDfs(self.Root, RecordLines)

        try:
            Out = open(FileName, "w")
        except Exception:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

        try:
            Out.write("//\n//  All Opcode Record List\n//\n")
            for RecordLine in RecordLines:
                Out.write(f"{RecordLine}\n")
            Out.write(f"\nTotal Size of all record is {gFormPkg.Offset:0>8x}")
            gVfrVarDataTypeDB.Dump(Out)
            Out.close()
        except Exception:
            EdkLogger.error(
                "VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % FileName
            )

    def _GenRecordListFileDfs(self, Root, RecordLines):
        if Root is None:
            return
        if Root.OpCode is not None:
            LineBuffer = ""
            if Root.Buffer is not None:
                for i in range(0, len(Root.Buffer)):
                    LineBuffer += f"{Root.Buffer[i]:0>2X} "
                Record = f">{Root.Offset:0>8X}: {LineBuffer}\n"
                RecordLines.append(Record)

        if Root.Child != []:
            for ChildNode in Root.Child:
                self._GenRecordListFileDfs(ChildNode, RecordLines)

    def DumpJson(self):
        FileName = self.Options.JsonFileName
        try:
            with open(FileName, "w") as f:
                f.write("{\n")
                f.write('  "DataStruct" : {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode is not None:
                    f.write(f'    "{pNode.TypeName}" : [\n')
                    FNode = pNode.Members
                    while FNode is not None:
                        f.write("{\n")
                        f.write(f'  "Name": "{FNode.FieldName}",\n')
                        if FNode.ArrayNum > 0:
                            f.write(f'  "Type": "{FNode.FieldType.TypeName}[{FNode.ArrayNum}]",\n')
                        else:
                            f.write(f'  "Type": "{FNode.FieldType.TypeName}",\n')
                        f.write(f'  "Offset": {FNode.Offset}\n')
                        if FNode.Next is None:
                            f.write("}\n")
                        else:
                            f.write("}, \n")
                        FNode = FNode.Next
                    if pNode.Next is None:
                        f.write("    ]\n")
                    else:
                        f.write("    ],\n")
                    pNode = pNode.Next
                f.write("  },\n")
                f.write('  "DataStructAttribute": {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode is not None:
                    f.write(f'    "{pNode.TypeName}": {{\n')
                    f.write(f'  "Alignment": {pNode.Align},\n')
                    f.write(f'  "TotalSize": {pNode.TotalSize}\n')
                    if pNode.Next is None:
                        f.write("}\n")
                    else:
                        f.write("},\n")
                    pNode = pNode.Next
                f.write("  },\n")
                f.write('  "VarDefine" : {\n')
                pVsNode = gVfrDataStorage.GetBufferVarStoreList()
                while pVsNode is not None:
                    f.write(f'    "{pVsNode.VarStoreName}": {{\n')
                    f.write(f'  "Type": "{pVsNode.DataType.TypeName}",\n')
                    f.write(f'  "Attributes": {pVsNode.Attributes},\n')
                    f.write(f'  "VarStoreId": {pVsNode.VarStoreId},\n')
                    f.write(f'  "VendorGuid": {pVsNode.Guid.to_string()}\n')
                    if pVsNode.Next is None:
                        f.write("}\n")
                    else:
                        f.write("},\n")

                    pVsNode = pVsNode.Next
                f.write("  },\n")
                f.write('  "Data" : [\n')
                pVsNode = gVfrBufferConfig.GetVarItemList()
                while pVsNode is not None:
                    if pVsNode.Id is None:
                        pVsNode = pVsNode.Next
                        continue
                    pInfoNode = pVsNode.InfoStrList
                    while pInfoNode is not None:
                        f.write("{\n")
                        f.write(f'  "VendorGuid": {pVsNode.Guid.to_string()},\n')
                        f.write(f'  "VarName": "{pVsNode.Name}",\n')
                        f.write(f'  "DefaultStore": "{pVsNode.Id}",\n')
                        f.write(f'  "Size": "{pInfoNode.Width}",\n')
                        f.write(f'  "Offset": {pInfoNode.Offset},\n')
                        if (
                            pInfoNode.Type == EFI_IFR_TYPE_DATE
                            and type(pInfoNode.Value) == EFI_HII_DATE
                        ):
                            f.write(
                                f'  "Value": "{pInfoNode.Value.Year}/{pInfoNode.Value.Month}/{pInfoNode.Value.Day}"\n'
                            )
                        elif (
                            pInfoNode.Type == EFI_IFR_TYPE_TIME
                            and type(pInfoNode.Value) == EFI_HII_TIME
                        ):
                            f.write(
                                f'  "Value": "{pInfoNode.Value.Hour}:{pInfoNode.Value.Minute}:{pInfoNode.Value.Second}"\n'
                            )
                        elif (
                            pInfoNode.Type == EFI_IFR_TYPE_REF
                            and type(pInfoNode.Value) == EFI_HII_REF
                        ):
                            f.write(
                                f'  "Value": "{pInfoNode.Value.QuestionId};{pInfoNode.Value.FormId};{pInfoNode.Value.FormSetGuid.to_string()};{pInfoNode.Value.DevicePath}"\n'
                            )
                        else:
                            f.write(f'  "Value": "{pInfoNode.Value}"\n')

                        f.write("},\n")
                        pInfoNode = pInfoNode.Next
                    pVsNode = pVsNode.Next
                f.write("{\n")
                f.write('  "VendorGuid": "NA",\n')
                f.write('  "VarName": "NA",\n')
                f.write('  "DefaultStore": "NA",\n')
                f.write('  "Size": 0,\n')
                f.write('  "Offset": 0,\n')
                f.write('  "Value": "0x00"\n')
                f.write("}\n")
                f.write("  ]\n")
                f.write("}\n")

            f.close()
        except Exception:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

    def _DumpQuestionInfosForXMLCLI(self, Root, f, ValueIndent):
        Info = Root.Data.GetInfo()
        if Root.Condition is not None:
            f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

        if Root.Data.QName is not None:
            f.write(f"{ValueIndent}name:  {Root.Data.QName}  #  Optional Input\n")

        if Root.Data.VarIdStr != "":
            f.write(f"{ValueIndent}varid:  {Root.Data.VarIdStr}  #  Optional Input\n")
        if Root.Data.HasQuestionId:
            f.write(
                f"{ValueIndent}questionid:  {'0x%x' % Info.Question.QuestionId}  # Optional Input\n"
            )
        f.write(f"{ValueIndent}prompt: '{self._DisplayUniStr(Info.Question.Header.Prompt)}'\n")
        f.write(f"{ValueIndent}help: '{self._DisplayUniStr(Info.Question.Header.Help)}'\n")
        if Root.Data.FlagsStream != "":
            f.write(f"{ValueIndent}flags:  {Root.Data.FlagsStream}  # Optional input , flags\n")
        if Root.Data.HasKey:
            f.write(
                f"{ValueIndent}key:  {'0x%0x ' % Info.Question.QuestionId} # Optional input, key\n"
            )

    def _DisplayUniStr(self, Key):
        StrId = f"0x{Key:04x}"
        FormatedStrId = StrId[:2] + StrId[2:].upper()
        return f"STRING_TOKEN({FormatedStrId})"

    def DumpYamlForXMLCLI(self):
        FileName = self.Options.YamlFileName
        try:
            with open(FileName, "w", encoding="utf-8") as f:
                f.write("## DO NOT REMOVE -- YAML Mode\n")
                self._DumpYamlForXMLCLIDfs(self.Root, f)
            f.close()
        except Exception:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

    def _DumpYamlForXMLCLIDfs(self, Root, f):
        try:
            if Root is None:
                return
            if Root.OpCode is not None:
                if Root.Level == 0:
                    KeyIndent = ""
                    ValueIndent = ""
                else:
                    KeyIndent = " " * ((Root.Level * 2 - 1) * 2)
                    ValueIndent = " " * ((Root.Level * 2 + 1) * 2)

                Info = Root.Data.GetInfo()

                if Root.OpCode == EFI_IFR_FORM_SET_OP:
                    f.write(KeyIndent + "formset:\n")
                    ValueIndent = " " * (Root.Level + 1) * 2
                    f.write(
                        f"{ValueIndent}guid:  '{{{Info.Guid.Data1:#x}, {Info.Guid.Data2:#x}, {Info.Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Guid.Data4)}}}}}'\n"
                    )
                    f.write(f"{ValueIndent}title:  '{self._DisplayUniStr(Info.FormSetTitle)}'\n")
                    f.write(f"{ValueIndent}help:  '{self._DisplayUniStr(Info.Help)}'\n")

                    if Root.Data.ClassGuidNum != 0:
                        f.write(ValueIndent + "classguid:  ")
                        for i in range(0, len(Root.Data.ClassGuid)):
                            Guid = Root.Data.GetClassGuid()[i]
                            if i != len(Root.Data.ClassGuid) - 1:
                                f.write(
                                    f"'{{{Guid.Data1:#x}, {Guid.Data2:#x}, {Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Guid.Data4)}}}}}' | "
                                )
                            else:
                                f.write(
                                    f"'{{{Guid.Data1:#x}, {Guid.Data2:#x}, {Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Guid.Data4)}}}}}'  # Optional Input \n"
                                )

                    if (
                        Root.Child != []
                        and Root.Child[0].OpCode != EFI_IFR_END_OP
                        and type(Root.Child[0].Data) != IfrSubClass
                        and type(Root.Child[0].Data) != IfrClass
                    ):
                        f.write(ValueIndent + "component:  \n")
                    elif (
                        type(Root.Child[0].Data) == IfrClass
                        and type(Root.Child[1].Data) == IfrSubClass
                    ):
                        Root.Child[0].Data.HasSubClass = True

                if Root.OpCode == EFI_IFR_VARSTORE_OP:
                    f.write(KeyIndent + "- varstore:\n")
                    f.write(f"{ValueIndent}type:  {Root.Data.Type}\n")
                    if Root.Data.HasVarStoreId:
                        f.write(f"{ValueIndent}varid:  {Info.VarStoreId:#04x} # Optional Input\n")
                    Name = "".join(chr(x) for x in Info.Name)
                    f.write(f"{ValueIndent}name:  {Name}\n")
                    f.write(
                        f"{ValueIndent}guid: '{{{Info.Guid.Data1:#x}, {Info.Guid.Data2:#x}, {Info.Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Guid.Data4)}}}}}'\n"
                    )

                if Root.OpCode == EFI_IFR_VARSTORE_EFI_OP:
                    f.write(KeyIndent + "- efivarstore:\n")
                    f.write(f"{ValueIndent}type:  {Root.Data.Type}\n")
                    if Root.Data.HasVarStoreId:
                        if "varid" in Root.Dict:
                            f.write(
                                f"{ValueIndent}varid:  {Info.VarStoreId:#04x} # Optional Input\n"
                            )
                    f.write(f"{ValueIndent}attribute:  {Root.Data.AttributesText} \n")
                    if Root.Data.NameStringId:
                        f.write(
                            f"{ValueIndent}name: '{self._DisplayUniStr(Root.Data.NameStringId)}'\n"
                        )
                        f.write(ValueIndent + "varsize:  " + Root.Data.VarSize + "\n")
                    else:
                        Name = "".join(chr(x) for x in Info.Name)
                        f.write(f"{ValueIndent}name:  {Name}\n")
                    f.write(
                        f"{ValueIndent}guid:  '{{{Info.Guid.Data1:#x}, {Info.Guid.Data2:#x}, {Info.Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Guid.Data4)}}}}}'\n"
                    )

                if Root.OpCode == EFI_IFR_VARSTORE_NAME_VALUE_OP:
                    f.write(KeyIndent + "- namevaluevarstore:\n")
                    f.write(f"{ValueIndent}type:  {Root.Data.Type}\n")
                    if Root.Data.HasVarStoreId:
                        f.write(f"{ValueIndent}varid:  {Info.VarStoreId:#04x} # Optional Input\n")
                    f.write(
                        f"{ValueIndent}guid:  '{{{Info.Guid.Data1:#x}, {Info.Guid.Data2:#x}, {Info.Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Guid.Data4)}}}}}'\n"
                    )
                    if Root.Data.NameItemList != []:
                        f.write(ValueIndent + "nametable: \n")
                        for NameItem in Root.Data.NameItemList:
                            f.write(f"{ValueIndent} - name:  '{self._DisplayUniStr(NameItem)}'\n")

                if Root.OpCode == EFI_IFR_DEFAULTSTORE_OP:
                    gVfrDefaultStore.UpdateDefaultType(Root)

                if Root.OpCode == EFI_IFR_SHOWN_DEFAULTSTORE_OP:
                    f.write(KeyIndent + "- defaultstore:\n")
                    f.write(f"{ValueIndent}type:  {Root.Data.Type}\n")
                    f.write(f"{ValueIndent}prompt:  '{self._DisplayUniStr(Info.DefaultName)}'\n")
                    if Root.Data.HasAttr:
                        f.write(
                            f"{ValueIndent}attribute:  {'0x%04x' % Info.DefaultId} # Default ID, Optional input\n"
                        )

                if Root.OpCode == EFI_IFR_FORM_OP:
                    f.write(KeyIndent + "- form: \n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

                    f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId} \n")
                    f.write(f"{ValueIndent}title:  '{self._DisplayUniStr(Info.FormTitle)}'\n")

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_FORM_MAP_OP:
                    MethodMapList = Root.Data.GetMethodMapList()
                    f.write(KeyIndent + "- formmap: \n")
                    f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId} \n")

                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

                    if MethodMapList != []:
                        f.write(ValueIndent + "map: # optional input\n")
                        for MethodMap in MethodMapList:
                            f.write(f"{ValueIndent}- maptitle:  {MethodMap.MethodTitle}\n")
                            f.write(
                                f"{ValueIndent}  mapguid:  '{{{{"
                                f"{MethodMap.MethodIdentifier.Data1}, {MethodMap.MethodIdentifier.Data2}, {MethodMap.MethodIdentifier.Data3},"
                                f"{{ {', '.join('0x%x' % x for x in MethodMap.MethodIdentifier.Data4)} }}"
                                f"}}}}'\n"
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_IMAGE_OP:
                    f.write(f"{ValueIndent}image:  '{self._DisplayUniStr(Info.Id)}'\n")
                if Root.OpCode == EFI_IFR_RULE_OP:  #
                    f.write(f"{KeyIndent}- rule:\n")

                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

                    f.write(
                        f"{ValueIndent}name:  {Root.Data.GetRuleName()}\n"
                        f"{ValueIndent}expression:  {Root.Expression} \n"
                    )

                if Root.OpCode == EFI_IFR_SUBTITLE_OP:
                    f.write(KeyIndent + "- subtitle:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}text: '{self._DisplayUniStr(Info.Statement.Prompt)}'\n")

                    if Root.Data.FlagsStream != "":
                        f.write(f"{ValueIndent}flags:  {Root.Data.FlagsStream}  # Optional Input\n")

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(f"{ValueIndent}component:  \n")

                if Root.OpCode == EFI_IFR_TEXT_OP:
                    f.write(KeyIndent + "- text:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    if type(Info) == EFI_IFR_TEXT:
                        f.write(
                            f"{ValueIndent}help:  '{self._DisplayUniStr(Info.Statement.Help)}'\n"
                        )
                        f.write(
                            f"{ValueIndent}prompt:  '{self._DisplayUniStr(Info.Statement.Prompt)}'\n"
                        )
                        if Root.Data.HasTextTwo:
                            f.write(f"{ValueIndent}text:  '{self._DisplayUniStr(Info.TextTwo)}'\n")
                    if type(Info) == EFI_IFR_ACTION:
                        f.write(
                            f"{ValueIndent}help:  '{self._DisplayUniStr(Info.Question.Header.Help)}'\n"
                        )
                        f.write(
                            f"{ValueIndent}prompt:  '{self._DisplayUniStr(Info.Question.Header.Prompt)}'\n"
                        )
                        if Root.Data.FlagsStream != "":
                            f.write(
                                f"{ValueIndent}flags:  {Root.Data.FlagsStream}  # Optional Input, Question Flags\n"
                            )
                        if Root.Data.HasKey:
                            f.write(
                                f"{ValueIndent}key:  {'0x%04x' % Info.Question.QuestionId}  # Optional Input, Question QuestionId\n"
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ACTION_OP:
                    f.write(KeyIndent + "- action:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    f.write(f"{ValueIndent}config:  {Info.QuestionConfig}  # QuestionConfig\n")
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ONE_OF_OP:
                    f.write(KeyIndent + "- oneof:\n")

                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)

                    if Root.Data.HasMinMax:
                        f.write(
                            f"{ValueIndent}maximum:  {'0x%0x' % Info.Data.MaxValue} # Optional Input\n"
                        )
                        f.write(
                            f"{ValueIndent}minimum:  {'0x%0x' % Info.Data.MinValue} # Optional Input\n"
                        )

                    if Root.Data.HasStep:
                        f.write(f"{ValueIndent}step:  {Info.Data.Step} # Optional Input\n")
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ONE_OF_OPTION_OP:
                    f.write(KeyIndent + "- option:  \n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}text: '{self._DisplayUniStr(Info.Option)}'\n")

                    if type(Root.Data) == IfrOneOfOption:
                        if Root.Data.ValueStream != "":
                            f.write(f"{ValueIndent}value:  {Root.Data.ValueStream}\n")

                    if Root.Data.FlagsStream != "":
                        f.write(f"{ValueIndent}flags:  {Root.Data.FlagsStream} # Optional Input\n")

                    if Root.Data.IfrOptionKey is not None:
                        f.write(
                            f"{ValueIndent}key:  {'0x%04x' % Root.Data.GetIfrOptionKey()} # Optional Input\n"
                        )

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DEFAULT_OP:
                    # 　specific condition here
                    if Root.Position != "Do not display":
                        f.write(KeyIndent + "- default:\n")
                        if Root.Condition is not None:
                            f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

                        if type(Root.Data) == IfrDefault:
                            Str = Root.Data.ValueStream
                            if Str.find(";") != -1:
                                RefList = Str.split(";")
                                Str = (
                                    RefList[0]
                                    + ";"
                                    + RefList[1]
                                    + ";"
                                    + f"{{{Info.Value[0].FormSetGuid.Data1:#x}, {Info.Value[0].FormSetGuid.Data2:#x}, {Info.Value[0].FormSetGuid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Value[0].FormSetGuid.Data4)}}}}}"
                                    + ";"
                                    + self._DisplayUniStr(Info.Value[0].DevicePath)
                                )

                            if Str != "":
                                Str = Str.replace("{", "[").replace("}", "]")
                                if (
                                    Str.find(":") != -1
                                    or Str.find("/") != -1
                                    or Str.find(";") != -1
                                ):
                                    Str = "(" + Str + ")"
                                f.write(f"{ValueIndent}value:  {Str}\n")

                        elif type(Root.Data) == IfrDefault2:
                            f.write(f"{ValueIndent}value_exp: '{Root.Child[0].Expression}'\n")

                        if Root.Data.DefaultStore != "":
                            f.write(f"{ValueIndent}defaultstore: {Root.Data.DefaultStore}\n")

                if Root.OpCode == EFI_IFR_ORDERED_LIST_OP:
                    f.write(KeyIndent + "- orderedlist:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    if Root.Data.HasMaxContainers:
                        f.write(
                            f"{ValueIndent}maxcontainers:  {Info.MaxContainers} # Optional Input\n"
                        )

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_NUMERIC_OP:
                    f.write(KeyIndent + "- numeric:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    f.write(f"{ValueIndent}maximum:  {'0x%0x' % Info.Data.MaxValue}\n")
                    f.write(f"{ValueIndent}minimum:  {'0x%0x' % Info.Data.MinValue}\n")

                    if Root.Data.HasStep:
                        f.write(f"{ValueIndent}step:  {Info.Data.Step} # Optional Input\n")

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_CHECKBOX_OP:
                    f.write(KeyIndent + "- checkbox:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_TIME_OP:
                    f.write(KeyIndent + "- time:\n")
                    if Root.Data.Hour is None:
                        self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                            f.write(ValueIndent + "component:  \n")
                    else:
                        f.write(f"{ValueIndent}hour:  {Root.Data.Hour}\n")

                        if Root.Data.D_Hour is not None:
                            f.write(f"{ValueIndent}default_hour:  {Root.Data.D_Hour}\n")

                        f.write(f"{ValueIndent}minute:  {Root.Data.Minute}\n")

                        if Root.Data.D_Minute is not None:
                            f.write(f"{ValueIndent}default_minute:  {Root.Data.D_Minute}\n")

                        f.write(f"{ValueIndent}second:  {Root.Data.Second}\n")

                        if Root.Data.D_Second is not None:
                            f.write(f"{ValueIndent}default_second:  {Root.Data.D_Second}\n")
                        f.write(
                            f"{ValueIndent}prompt:  '{self._DisplayUniStr(Info.Question.Header.Prompt)}'\n"
                        )
                        f.write(
                            f"{ValueIndent}help:  '{self._DisplayUniStr(Info.Question.Header.Help)}'\n"
                        )
                        if Root.Data.FlagsStream != "":
                            f.write(
                                f"{ValueIndent}flags:  {Root.Data.FlagsStream}  # Optional input , flags\n"
                            )

                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_DEFAULT_OP:
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DATE_OP:
                    f.write(KeyIndent + "- date:\n")
                    if Root.Data.Year is None:
                        self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                            f.write(ValueIndent + "component:  \n")
                    else:
                        f.write(f"{ValueIndent}year:  {Root.Data.Year}\n")
                        f.write(f"{ValueIndent}min_year:  {Root.Data.Min}\n")
                        f.write(f"{ValueIndent}max_year:  {Root.Data.Max}\n")

                        if Root.Data.D_Year is not None:
                            f.write(f"{ValueIndent}default_year:  {Root.Data.D_Year}\n")

                        f.write(f"{ValueIndent}month:  {Root.Data.Month}\n")

                        if Root.Data.D_Month is not None:
                            f.write(f"{ValueIndent}default_month:  {Root.Data.D_Month}\n")

                        f.write(f"{ValueIndent}day:  {Root.Data.Day}\n")

                        if Root.Data.D_Day is not None:
                            f.write(f"{ValueIndent}default_day:  {Root.Data.D_Day}\n")

                        f.write(
                            f"{ValueIndent}prompt:  '{self._DisplayUniStr(Info.Question.Header.Prompt)}'\n"
                        )
                        f.write(
                            f"{ValueIndent}help:  '{self._DisplayUniStr(Info.Question.Header.Help)}'\n"
                        )

                        if Root.Data.FlagsStream != "":
                            f.write(
                                f"{ValueIndent}flags:  {Root.Data.FlagsStream}  # Optional input , flags\n"
                            )

                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_DEFAULT_OP:
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_STRING_OP:
                    f.write(KeyIndent + "- string:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    f.write(f"{ValueIndent}minsize:  {Info.MinSize}\n")
                    f.write(f"{ValueIndent}maxsize:  {Info.MaxSize}\n")

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(f"{ValueIndent}component:  \n")

                if Root.OpCode == EFI_IFR_PASSWORD_OP:
                    f.write(KeyIndent + "- password:\n")
                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)
                    f.write(
                        f"{ValueIndent}minsize:  {Root.Dict['minsize'].Key if 'minsize' in Root.Dict else Info.MinSize}\n"
                    )
                    f.write(
                        f"{ValueIndent}maxsize:  {Root.Dict['maxsize'].Key if 'maxsize' in Root.Dict else Info.MaxSize}\n"
                    )

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(f"{ValueIndent}component:  \n")

                if Root.OpCode == EFI_IFR_RESET_BUTTON_OP:
                    f.write(KeyIndent + "- resetbutton:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}defaultstore:  {Root.Data.DefaultStore}\n")
                    f.write(
                        f"{ValueIndent}prompt: '{self._DisplayUniStr(Info.Statement.Prompt)}'\n"
                    )
                    f.write(f"{ValueIndent}help: '{self._DisplayUniStr(Info.Statement.Help)}'\n")
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_REF_OP:
                    f.write(KeyIndent + "- goto:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")

                    if type(Root.Data) == IfrRef4:
                        f.write(
                            f"{ValueIndent}devicepath: '{self._DisplayUniStr(Info.DevicePath)}' # Optional Input\n"
                        )
                        f.write(
                            f"{ValueIndent}formsetguid:  '{{{Info.FormSetId.Data1:#x}, {Info.FormSetId.Data2:#x}, {Info.FormSetId.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.FormSetId.Data4)}}}}}' #  Optional Input\n"
                        )
                        f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId}\n")
                        f.write(
                            f"{ValueIndent}question:  {'0x%x' % Info.QuestionId} # Optional Input\n"
                        )

                    if type(Root.Data) == IfrRef3:
                        f.write(
                            f"{ValueIndent}formsetguid:  '{{{Info.FormSetId.Data1:#x}, {Info.FormSetId.Data2:#x}, {Info.FormSetId.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.FormSetId.Data4)}}}}}' #  Optional Input\n"
                        )
                        f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId}\n")
                        f.write(
                            f"{ValueIndent}question:  {'0x%x' % Info.QuestionId} # Optional Input\n"
                        )

                    if type(Root.Data) == IfrRef2:
                        f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId}\n")
                        f.write(
                            f"{ValueIndent}question:  {'0x%x' % Info.QuestionId} # Optional Input\n"
                        )

                    if type(Root.Data) == IfrRef:
                        f.write(f"{ValueIndent}formid:  {'0x%x' % Info.FormId}\n")

                    self._DumpQuestionInfosForXMLCLI(Root, f, ValueIndent)

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_REFRESH_OP:
                    f.write(KeyIndent + "- refresh:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}interval:  {Info.RefreshInterval}  # RefreshInterval\n")

                if Root.OpCode == EFI_IFR_VARSTORE_DEVICE_OP:
                    f.write(KeyIndent + "- varstoredevice:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}devicepath:  {Info.DevicePath}  # DevicePath\n")

                if Root.OpCode == EFI_IFR_REFRESH_ID_OP:
                    f.write(KeyIndent + "- refreshguid:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(
                        f"{ValueIndent}guid:  '{{{Info.RefreshEventGroupId.Data1:#x}, {Info.RefreshEventGroupId.Data2:#x}, {Info.RefreshEventGroupId.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.RefreshEventGroupId.Data4)}}}}}' \n"
                    )

                if Root.OpCode == EFI_IFR_WARNING_IF_OP:
                    f.write(KeyIndent + "- warningif:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(
                        f"{ValueIndent}prompt: '{self._DisplayUniStr(Info.Warning)}' # Optional Input\n"
                    )
                    if Root.Data.HasTimeOut:
                        f.write(f"{ValueIndent}timeout:  {Info.TimeOut} # optional input \n")
                    f.write(f"{ValueIndent}expression:  {Root.Expression}\n")

                if Root.OpCode == EFI_IFR_GUID_OP:
                    if type(Root.Data) == IfrLabel:
                        f.write(KeyIndent + "- label:\n")
                        if Root.Condition is not None:
                            f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                        f.write(f"{ValueIndent}number:  {'0x%x' % Info.Number}  # Number\n")

                    if type(Root.Data) == IfrBanner:
                        f.write(KeyIndent + "- banner:\n")
                        if Root.Condition is not None:
                            f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                        f.write(
                            f"{ValueIndent}title: '{self._DisplayUniStr(Info.Title)}' # Optional Input\n"
                        )
                        if not Root.Data.HasTimeOut:
                            if "line" in Root.Dict:
                                f.write(f"{ValueIndent}line:  {Root.Dict['line'].Key}\n")
                            else:
                                f.write(f"{ValueIndent}line:  {Info.LineNumber}\n")
                            f.write(f"{ValueIndent}align:  {Root.Dict['align'].Key}\n")
                        else:
                            f.write(f"{ValueIndent}timeout:  {Root.Data.TimeOut}\n")

                    if type(Root.Data) == IfrClass:
                        f.write(KeyIndent + "class:  " + Root.Data.ClassStr + "\n")
                        if not Root.Data.HasSubClass:
                            f.write(KeyIndent + "component:  \n")

                    if type(Root.Data) == IfrSubClass:
                        f.write(KeyIndent + "subclass:  " + Root.Data.SubClassStr + "\n")
                        f.write(KeyIndent + "component:  \n")

                    if type(Root.Data) == IfrExtensionGuid:
                        if type(Root.Parent.Data) == IfrExtensionGuid:
                            Root.Level -= 1
                            KeyIndent = " " * ((Root.Level * 2 - 1) * 2)
                            ValueIndent = " " * ((Root.Level * 2 + 1) * 2)
                        f.write(KeyIndent + "- guidop:\n")
                        if Root.Condition is not None:
                            f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                        f.write(
                            f"{ValueIndent}guid:  '{{{Info.Guid.Data1:#x}, {Info.Guid.Data2:#x}, {Info.Guid.Data3:#x}, {{ {', '.join(f'{x:#x}' for x in Info.Guid.Data4)}}}}}' \n"
                        )
                        if Root.Data.GetDataType() != "":
                            f.write(f"{ValueIndent}{Root.Data.GetDataType()}: \n")
                            for data in Root.Data.GetFieldList():
                                f.write(f"{ValueIndent}  {data[0]}:  {data[1]:#x}\n")

                if Root.OpCode == EFI_IFR_NO_SUBMIT_IF_OP:
                    f.write(KeyIndent + "- nosubmitif:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}prompt: '{self._DisplayUniStr(Info.Error)}'\n")
                    if Root.Data.FlagsStream != "":
                        f.write(ValueIndent + "flags:  " + Root.Data.FlagsStream + "\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")

                if Root.OpCode == EFI_IFR_READ_OP:
                    f.write(KeyIndent + "- read:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")

                if Root.OpCode == EFI_IFR_WRITE_OP:
                    f.write(KeyIndent + "- write:\n")
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")

                if Root.OpCode == EFI_IFR_VALUE_OP and Root.Parent.OpCode != EFI_IFR_DEFAULT_OP:  #
                    f.write(KeyIndent + "- value:\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")

                if Root.OpCode == EFI_IFR_MODAL_TAG_OP:
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(KeyIndent + "- modal: null\n")

                if Root.OpCode == EFI_IFR_LOCKED_OP:
                    if Root.Condition is not None:
                        f.write(f"{ValueIndent}condition:  '{Root.Condition}'\n")
                    f.write(KeyIndent + "- locked: null\n")

                if Root.OpCode == EFI_IFR_SUPPRESS_IF_OP:
                    f.write(KeyIndent + "- suppressif:\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")
                    if len(Root.Child) > 2 and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DISABLE_IF_OP:
                    # If the disable node is inserted after the formset ends, do not show it in source yml
                    # use the expression content to tell if the  disable node is inserted after the formset ends
                    if Root.Expression is not None:
                        f.write(KeyIndent + "- disableif:\n")
                        f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")
                        if (
                            len(Root.Child) > 2
                            and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps
                        ):
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_GRAY_OUT_IF_OP:
                    f.write(KeyIndent + "- grayoutif:\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")
                    if len(Root.Child) > 2 and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_INCONSISTENT_IF_OP:
                    f.write(KeyIndent + "- inconsistentif:\n")
                    f.write(f"{ValueIndent}expression:  '{Root.Expression}'\n")
                    f.write(f"{ValueIndent}prompt: '{self._DisplayUniStr(Info.Error)}'\n")
                    if Root.Data.FlagsStream != "":
                        f.write(ValueIndent + "flags:  " + Root.Data.FlagsStream + "\n")
            self.LastOp = Root.OpCode

        except Exception:
            EdkLogger.error(
                "VfrCompiler",
                FILE_WRITE_FAILURE,
                "File write failed for %s" % (self.Options.YamlFileName),
                None,
            )

        if Root.Child != []:
            for ChildNode in Root.Child:
                if Root.OpCode in ConditionOps:
                    ChildNode.Level = Root.Level + 1
                elif type(Root.Data) == IfrGuid and (
                    ChildNode.OpCode in [EFI_IFR_CHECKBOX_OP, EFI_IFR_NUMERIC_OP, EFI_IFR_ONE_OF_OP]
                ):
                    ChildNode.Level = Root.Level
                else:
                    ChildNode.Level = Root.Level + 1

                self._DumpYamlForXMLCLIDfs(ChildNode, f)

        return
