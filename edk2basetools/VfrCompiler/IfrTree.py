from antlr4 import *
from edk2basetools.VfrCompiler.IfrCtypes import *
from edk2basetools.VfrCompiler.IfrPreProcess import *
from edk2basetools.VfrCompiler.IfrFormPkg import *

# Ifr related Info -> ctypes obj
# ã€€conditional Info
# Structure Info

VFR_COMPILER_VERSION = "2.01 (UEFI 2.4)"
BUILD_VERSION = "Developer Build based on Revision: Unknown"


class IfrTreeNode:
    def __init__(self, OpCode=None, Data=None, Buffer=None, Position=None) -> None:
        self.OpCode = OpCode
        self.Data = Data
        self.Buffer = Buffer
        self.Position = Position
        self.Condition = None
        self.Expression = None
        self.Dict = {}
        self.Offset = None
        self.Parent = None
        self.Child = []
        self.Level = -1

    def hasCondition(self) -> bool:
        if self.Condition == None:
            return False
        else:
            return True

    def hasChild(self) -> bool:
        if self.Child == []:
            return False
        else:
            return True

    def isFinalChild(self) -> bool:
        ParTree = self.Parent
        if ParTree:
            if ParTree.Child[-1] == self:
                return True
        return False

    def insertChild(self, NewNode, pos: int = None) -> None:
        if NewNode != None:
            if not pos:
                self.Child.append(NewNode)
            else:
                self.Child.insert(pos, NewNode)

            NewNode.Parent = self

    # lastNode.insertRel(newNode)
    def insertRel(self, newNode) -> None:
        if self.Parent:
            parentTree = self.Parent
            new_index = parentTree.Child.index(self) + 1
            parentTree.Child.insert(new_index, newNode)
        self.NextRel = newNode
        newNode.LastRel = self

    def deleteNode(self, deletekey: str) -> None:
        FindStatus, DeleteTree = self.FindNode(deletekey)
        if FindStatus:
            parentTree = DeleteTree.Parent
            lastTree = DeleteTree.LastRel
            nextTree = DeleteTree.NextRel
            if parentTree:
                index = parentTree.Child.index(DeleteTree)
                del parentTree.Child[index]
            if lastTree and nextTree:
                lastTree.NextRel = nextTree
                nextTree.LastRel = lastTree
            elif lastTree:
                lastTree.NextRel = None
            elif nextTree:
                nextTree.LastRel = None
            return DeleteTree
        else:
            print("Could not find the target tree")
            return None


ExpOps = [
    EFI_IFR_DUP_OP,
    EFI_IFR_EQ_ID_VAL_OP,
    EFI_IFR_QUESTION_REF1_OP,
    EFI_IFR_EQ_ID_VAL_OP,
    EFI_IFR_EQ_ID_ID_OP,
    EFI_IFR_EQ_ID_VAL_LIST_OP,
    EFI_IFR_RULE_REF_OP,
    EFI_IFR_STRING_REF1_OP,
    EFI_IFR_THIS_OP,
    EFI_IFR_SECURITY_OP,
    EFI_IFR_GET_OP,
    EFI_IFR_TRUE_OP,
    EFI_IFR_FALSE_OP,
    EFI_IFR_ONE_OP,
    EFI_IFR_ONES_OP,
    EFI_IFR_ZERO_OP,
    EFI_IFR_UNDEFINED_OP,
    EFI_IFR_VERSION_OP,
    EFI_IFR_UINT64_OP,
    EFI_IFR_QUESTION_REF2_OP,
    EFI_IFR_QUESTION_REF3_OP,
    EFI_IFR_SET_OP,
    EFI_IFR_DEFAULTSTORE_OP,
    EFI_IFR_OR_OP,
]

DefaultDictList = []


class IfrTree:
    def __init__(self, Root: IfrTreeNode, PreProcessDB: PreProcessDB, Options: Options) -> None:
        self.Root = Root
        self.Options = Options
        self.PreProcessDB = PreProcessDB

    def GenBinaryFiles(self):
        Hpk = None
        C = None
        RecordLines = []
        if self.Options.CreateIfrPkgFile:
            # GenBinary
            PkgHdr = gFormPkg.BuildPkgHdr()
            try:
                HpkFile = self.Options.PkgOutputFileName
                Hpk = open(HpkFile, "wb")
                Hpk.write(gFormPkg.StructToStream(PkgHdr))
            except:
                EdkLogger.error(
                    "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % HpkFile
                )

            # GenCFile
            try:
                CFile = self.Options.COutputFileName
                C = open(CFile, "w")
                C.write("//\n")
                C.write("//" + " " + "DO NOT EDIT -- auto-generated file\n")
                C.write("//\n")
                C.write("//" + " " + "This file is generated by the vfrcompiler utility\n")
                C.write("//\n\n")
                BaseName = "unsigned char " + self.Options.BaseFileName + "Bin[] = {\n"
                C.write(BaseName)
                C.write("  //" + " " + "ARRAY LENGTH\n\n")
                PkgLength = PkgHdr.Length + sizeof(ctypes.c_uint32)
                for B in PkgLength.to_bytes(4, byteorder="little", signed=True):
                    C.write("  0x%02X," % B)
                C.write("\n\n")
                C.write("  //" + " " + "PACKAGE HEADER\n\n")
                HeaderBuffer = gFormPkg.StructToStream(PkgHdr)
                for B in HeaderBuffer:
                    C.write("  0x%02X," % B)
                C.write("\n\n")
                C.write("  //" + " " + "PACKAGE DATA\n\n")
                self.Index = 0
            except:
                EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % CFile)

        if self.Options.CreateRecordListFile:
            # GenRecordList
            try:
                LstFile = self.Options.RecordListFileName
                Lst = open(LstFile, "w")
                Lst.write(
                    "//\n//  VFR compiler version {} {}\n//\n".format(
                        VFR_COMPILER_VERSION, BUILD_VERSION
                    )
                )
            except:
                EdkLogger.error(
                    "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % LstFile
                )

        self._GenBinaryFilesDfs(self.Root, Hpk, C, RecordLines)

        if self.Options.CreateIfrPkgFile:
            # GenCFile
            try:
                C.write("\n};\n")
            except:
                EdkLogger.error(
                    "VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % CFile, None
                )

        if self.Options.CreateRecordListFile:
            # GenRecordList
            try:
                In = open(self.Options.CProcessedVfrFileName, "r")
                InFileLines = []
                for Line in In:
                    InFileLines.append(Line)
                Hpk.close()
                C.close()
            except:
                EdkLogger.error(
                    "VfrCompiler",
                    FILE_OPEN_FAILURE,
                    "File open failed for %s" % self.Options.CProcessedVfrFileName,
                    None,
                )
            try:
                InsertedLine = 0
                for RecordLine in RecordLines:
                    InFileLines.insert(RecordLine.LineNo + InsertedLine, RecordLine.Record)
                    InsertedLine += 1
                for Line in InFileLines:
                    Lst.write("{}".format(Line))

                Lst.write("//\n//  All Opcode Record List\n//\n")
                for RecordLine in RecordLines:
                    Lst.write("{}".format(RecordLine.Record))
                Lst.write("\nTotal Size of all record is" + " {:0>8x}".format(gFormPkg.Offset))
                gVfrVarDataTypeDB.Dump(Lst)
                In.close()
                Lst.close()
            except:
                EdkLogger.error(
                    "VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % LstFile, None
                )

    def _GenBinaryFilesDfs(self, Root, Hpk, C, RecordLines):
        if Root == None:
            return

        if Root.OpCode != None:
            if Root.OpCode in ExpOps:
                # The Data is likely to be modified, so generate buffer here
                Root.Buffer = gFormPkg.StructToStream(Root.Data.GetInfo())
            if Root.Buffer != None:
                if self.Options.CreateIfrPkgFile and self.Options.CreateRecordListFile:
                    try:
                        Hpk.write(Root.Buffer)
                    except:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.PkgOutputFileName),
                        )

                    try:
                        LineBuffer = ""
                        for i in range(0, len(Root.Buffer)):
                            self.Index += 1
                            Data = Root.Buffer[i]
                            if self.Index % BYTES_PRE_LINE == 1:
                                C.write("  ")
                            C.write("0x%02X" % Data)
                            if self.Index != gFormPkg.PkgLength:
                                if (
                                    self.Index % BYTES_PRE_LINE == 0
                                ):
                                    C.write(",\n")
                                else:
                                    C.write(",  ")

                            LineBuffer += "{:0>2X} ".format(Root.Buffer[i])

                        Record = ">{:0>8X}: ".format(Root.Offset) + LineBuffer + "\n"
                        LineNo = Root.Data.GetLineNo()
                        RecordLines.append(ReCordNode(Record, LineNo))
                    except:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.COutputFileName),
                        )

                if self.Options.CreateIfrPkgFile and not self.Options.CreateRecordListFile:
                    try:
                        Hpk.write(Root.Buffer)
                    except:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.PkgOutputFileName),
                        )

                    try:
                        for i in range(0, len(Root.Buffer)):
                            self.Index += 1
                            Data = Root.Buffer[i]
                            if self.Index % BYTES_PRE_LINE == 1:
                                C.write("  ")
                            C.write("0x%02X" % Data)
                            if self.Index != gFormPkg.PkgLength:
                                if (
                                    self.Index % BYTES_PRE_LINE == 0
                                ):
                                    C.write(",\n")
                                else:
                                    C.write(",  ")
                    except:
                        EdkLogger.error(
                            "VfrCompiler",
                            FILE_WRITE_FAILURE,
                            "File write failed for %s" % (self.Options.COutputFileName),
                        )

                if not self.Options.CreateIfrPkgFile and self.Options.CreateRecordListFile:
                    LineBuffer = ""
                    for i in range(0, len(Root.Buffer)):
                        LineBuffer += "{:0>2X} ".format(Root.Buffer[i])

                    Record = ">{:0>8X}: ".format(Root.Offset) + LineBuffer + "\n"
                    LineNo = Root.Data.GetLineNo()
                    RecordLines.append(ReCordNode(Record, LineNo))

        if Root.Child != []:
            for ChildNode in Root.Child:
                self._GenBinaryFilesDfs(ChildNode, Hpk, C, RecordLines)

    def GenRecordListFile(self):
        FileName = self.Options.RecordListFileName
        RecordLines = []
        self._GenRecordListFileDfs(self.Root, RecordLines)

        try:
            Out = open(FileName, "w")
        except:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

        try:
            Out.write("//\n//  All Opcode Record List\n//\n")
            for RecordLine in RecordLines:
                Out.write("{}\n".format(RecordLine))
            Out.write("\nTotal Size of all record is" + " {:0>8x}".format(gFormPkg.Offset))
            gVfrVarDataTypeDB.Dump(Out)
            Out.close()
        except:
            EdkLogger.error(
                "VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % FileName
            )

    def _GenRecordListFileDfs(self, Root, RecordLines):
        if Root == None:
            return
        if Root.OpCode != None:
            LineBuffer = ""
            if Root.Buffer != None:
                for i in range(0, len(Root.Buffer)):
                    LineBuffer += "{:0>2X} ".format(Root.Buffer[i])

                Record = ">{:0>8X}: ".format(Root.Offset) + LineBuffer + "\n"
                RecordLines.append(Record)

        if Root.Child != []:
            for ChildNode in Root.Child:
                self._GenRecordListFileDfs(ChildNode, RecordLines)

    def DumpJson(self):
        FileName = self.Options.JsonFileName
        try:
            with open(FileName, "w") as f:
                f.write("{\n")
                f.write('  "DataStruct" : {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode != None:
                    f.write('    "{}" : [\n'.format(str(pNode.TypeName)))
                    FNode = pNode.Members
                    while FNode != None:
                        f.write("{\n")
                        f.write('  "Name": "{}",\n'.format(str(FNode.FieldName)))
                        if FNode.ArrayNum > 0:
                            f.write(
                                '  "Type": "{}[{}]",\n'.format(
                                    str(FNode.FieldType.TypeName), str(FNode.ArrayNum)
                                )
                            )
                        else:
                            f.write('  "Type": "{}",\n'.format(str(FNode.FieldType.TypeName)))
                        f.write('  "Offset": {}\n'.format(str(FNode.Offset)))
                        if FNode.Next == None:
                            f.write("}\n")
                        else:
                            f.write("}, \n")
                        FNode = FNode.Next
                    if pNode.Next == None:
                        f.write("    ]\n")
                    else:
                        f.write("    ],\n")
                    pNode = pNode.Next
                f.write("  },\n")
                f.write('  "DataStructAttribute": {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode != None:
                    f.write('    "{}"'.format(str(pNode.TypeName)) + ": {\n")
                    f.write('  "Alignment": {},\n'.format(str(pNode.Align)))
                    f.write('  "TotalSize": {}\n'.format(str(pNode.TotalSize)))
                    if pNode.Next == None:
                        f.write("}\n")
                    else:
                        f.write("},\n")
                    pNode = pNode.Next
                f.write("  },\n")
                f.write('  "VarDefine" : {\n')
                pVsNode = gVfrDataStorage.GetBufferVarStoreList()
                while pVsNode != None:
                    f.write('    "{}"'.format(str(pVsNode.VarStoreName)) + ": {\n")
                    f.write('  "Type": "{}",\n'.format(str(pVsNode.DataType.TypeName)))
                    f.write('  "Attributes": {},\n'.format(str(pVsNode.Attributes)))
                    f.write('  "VarStoreId": {},\n'.format(str(pVsNode.VarStoreId)))
                    f.write('  "VendorGuid": {}\n'.format(pVsNode.Guid.to_string()))
                    if pVsNode.Next == None:
                        f.write("}\n")
                    else:
                        f.write("},\n")

                    pVsNode = pVsNode.Next
                f.write("  },\n")
                f.write('  "Data" : [\n')
                pVsNode = gVfrBufferConfig.GetVarItemList()
                while pVsNode != None:
                    if pVsNode.Id == None:
                        pVsNode = pVsNode.Next
                        continue
                    pInfoNode = pVsNode.InfoStrList
                    while pInfoNode != None:
                        f.write("{\n")
                        f.write('  "VendorGuid": {},\n'.format(pVsNode.Guid.to_string()))
                        f.write('  "VarName": "{}",\n'.format(str(pVsNode.Name)))
                        f.write('  "DefaultStore": "{}",\n'.format(str(pVsNode.Id)))
                        f.write('  "Size": "{}",\n'.format(str(pInfoNode.Width)))
                        f.write('  "Offset": {},\n'.format(str(pInfoNode.Offset)))
                        if pInfoNode.Type == EFI_IFR_TYPE_DATE and type(pInfoNode.Value) == EFI_HII_DATE:
                            f.write(
                                '  "Value": "{}/{}/{}"\n'.format(
                                    pInfoNode.Value.Year, pInfoNode.Value.Month, pInfoNode.Value.Day
                                )
                            )
                        elif pInfoNode.Type == EFI_IFR_TYPE_TIME and type(pInfoNode.Value) == EFI_HII_TIME:
                            f.write(
                                '  "Value": "{}:{}:{}"\n'.format(
                                    pInfoNode.Value.Hour,
                                    pInfoNode.Value.Minute,
                                    pInfoNode.Value.Second,
                                )
                            )
                        elif pInfoNode.Type == EFI_IFR_TYPE_REF and type(pInfoNode.Value) == EFI_HII_REF:
                            f.write(
                                '  "Value": "{};{};{};{}\n'.format(
                                    pInfoNode.Value.QuestionId,
                                    pInfoNode.Value.FormId,
                                    pInfoNode.Value.FormSetGuid.to_string(),
                                    pInfoNode.Value.DevicePath,
                                )
                            )
                        else:
                            f.write('  "Value": "{}"\n'.format(pInfoNode.Value))

                        f.write("},\n")
                        pInfoNode = pInfoNode.Next
                    pVsNode = pVsNode.Next
                f.write("{\n")
                f.write('  "VendorGuid": "NA",\n')
                f.write('  "VarName": "NA",\n')
                f.write('  "DefaultStore": "NA",\n')
                f.write('  "Size": 0,\n')
                f.write('  "Offset": 0,\n')
                f.write('  "Value": "0x00"\n')
                f.write("}\n")
                f.write("  ]\n")
                f.write("}\n")

            f.close()
        except:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

    def DumpSourceYaml(self):
        FileName = self.Options.YamlFileName
        try:
            with open(FileName, "w") as f:
                f.write("## DO NOT REMOVE -- YAML Mode\n")
                if self.PreProcessDB.HeaderFiles != []:
                    f.write("include:\n")
                    for HeaderFile in self.PreProcessDB.HeaderFiles:
                        f.write(" - " + HeaderFile + "\n")
                    f.write("\n")
                if self.PreProcessDB.VfrDict != {}:
                    Index = 0
                    for Key in self.PreProcessDB.VfrDict.keys():
                        if type(self.PreProcessDB.VfrDict[Key]) == EFI_GUID:
                            if Index == 0:
                                f.write("defines:\n")
                            f.write(f"  {Key}:  '{self.PreProcessDB.VfrDict[Key].to_string()}'\n")
                            Index = Index + 1
                    f.write("\n")
                self._DumpYamlDfsWithUni(self.Root, f)
            f.close()
        except:
            EdkLogger.error(
                "VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None
            )

    def _FindIncludeHeaderFile(self, Start, Name):
        FileList = []
        for Relpath, Dirs, Files in os.walk(Start):
            if Name in Files:
                FullPath = os.path.join(Start, Relpath, Name)
                FileList.append(os.path.normpath(os.path.abspath(FullPath)))
        return FileList

    def _DumpQuestionInfosWithUni(self, Root, f, ValueIndent):
        Info = Root.Data.GetInfo()
        if Root.Condition != None:
            f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
        if Root.Data.QName != None:
            f.write(ValueIndent + "name:  {}  #  Optional Input\n".format(Root.Data.QName))
        if Root.Data.VarIdStr != "":
            f.write(ValueIndent + "varid:  {}  #  Optional Input\n".format(Root.Data.VarIdStr))
        if Root.Data.HasQuestionId:
            if "questionid" in Root.Dict.keys():
                f.write(
                    ValueIndent
                    + "questionid:  "
                    + Root.Dict["questionid"].Key
                    + " # Optional Input\n"
                )
            else:
                f.write(
                    ValueIndent
                    + "questionid:  {}  # Optional Input\n".format(
                        "0x%x" % Info.Question.QuestionId
                    )
                )

        f.write(
            ValueIndent
            + "prompt:  "
            + "STRING_TOKEN("
            + self.PreProcessDB.GetKey(Info.Question.Header.Prompt)
            + ")\n"
        )
        f.write(
            ValueIndent
            + "help:  "
            + "STRING_TOKEN("
            + self.PreProcessDB.GetKey(Info.Question.Header.Help)
            + ")\n"
        )
        if Root.Data.FlagsStream != "":
            f.write(
                ValueIndent + "flags:  {}  # Optional input , flags\n".format(Root.Data.FlagsStream)
            )
        if Root.Data.HasKey:
            if "key" in Root.Dict.keys():
                f.write(ValueIndent + "key:  " + Root.Dict["key"].Key + " # Optional Input\n")
            else:
                f.write(
                    ValueIndent
                    + "key:  {} # Optional input, key\n".format("0x%0x " % Info.Question.QuestionId)
                )

    def _DumpYamlDfsWithUni(self, Root, f):
        try:
            if Root == None:
                return
            if Root.OpCode != None:
                if Root.Level == 0:
                    KeyIndent = ""
                    ValueIndent = ""
                else:
                    KeyIndent = " " * ((Root.Level * 2 - 1) * 2)
                    ValueIndent = " " * ((Root.Level * 2 + 1) * 2)

                Info = Root.Data.GetInfo()

                if Root.OpCode == EFI_IFR_FORM_SET_OP:
                    f.write(KeyIndent + "formset:\n")
                    ValueIndent = " " * (Root.Level + 1) * 2
                    f.write(ValueIndent + "guid:  " + self.PreProcessDB.GetKey(Info.Guid) + "\n")
                    f.write(
                        ValueIndent
                        + "title:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.FormSetTitle)
                        + ")\n"
                    )
                    f.write(
                        ValueIndent
                        + "help:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Help)
                        + ")\n"
                    )
                    if Root.Data.ClassGuidNum != 0:
                        f.write(ValueIndent + "classguid:  ")
                        for i in range(0, len(Root.Data.ClassGuid)):
                            if i != len(Root.Data.ClassGuid) - 1:
                                f.write(self.PreProcessDB.GetKey(Root.Data.ClassGuid[i]) + " | ")
                            else:
                                f.write(
                                    self.PreProcessDB.GetKey(Root.Data.ClassGuid[i])
                                    + " # Optional Input \n"
                                )

                    if (
                        Root.Child != []
                        and Root.Child[0].OpCode != EFI_IFR_END_OP
                        and type(Root.Child[0].Data) != IfrSubClass
                        and type(Root.Child[0].Data) != IfrClass
                    ):
                        f.write(ValueIndent + "component:  \n")
                    elif (
                        type(Root.Child[0].Data) == IfrClass
                        and type(Root.Child[1].Data) == IfrSubClass
                    ):
                        Root.Child[0].Data.HasSubClass = True

                if Root.OpCode == EFI_IFR_VARSTORE_OP:
                    f.write(KeyIndent + "- varstore:\n")
                    f.write(ValueIndent + "type:  {}\n".format(Root.Data.Type))
                    if Root.Data.HasVarStoreId:
                        if "varid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "varid:  "
                                + Root.Dict["varid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "varid:  {} # Optional Input\n".format(
                                    "0x%04x" % (Info.VarStoreId)
                                )
                            )
                    Name = ""
                    for i in range(0, len(Info.Name)):
                        Name += chr(Info.Name[i])
                    f.write(ValueIndent + "name:  {}\n".format(Name))
                    f.write(ValueIndent + "guid:  " + self.PreProcessDB.GetKey(Info.Guid) + "\n")

                if Root.OpCode == EFI_IFR_VARSTORE_EFI_OP:
                    f.write(KeyIndent + "- efivarstore:\n")
                    f.write(ValueIndent + "type:  {}\n".format(Root.Data.Type))
                    if Root.Data.HasVarStoreId:
                        if "varid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "varid:  "
                                + Root.Dict["varid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "varid:  {} # Optional Input\n".format(
                                    "0x%04x" % (Info.VarStoreId)
                                )
                            )
                    f.write(ValueIndent + "attribute:  {} \n".format(Root.Data.AttributesText))
                    if Root.Data.NameStringId:
                        f.write(
                            ValueIndent
                            + "name:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Root.Data.NameStringId)
                            + ")\n"
                        )
                        f.write(ValueIndent + "varsize:  " + Root.Data.VarSize + "\n")
                    else:
                        Name = ""
                        for i in range(0, len(Info.Name)):
                            Name += chr(Info.Name[i])
                        f.write(ValueIndent + "name:  {}\n".format(Name))
                    f.write(ValueIndent + "guid:  " + self.PreProcessDB.GetKey(Info.Guid) + "\n")

                if Root.OpCode == EFI_IFR_VARSTORE_NAME_VALUE_OP:
                    f.write(KeyIndent + "- namevaluevarstore:\n")
                    f.write(ValueIndent + "type:  {}\n".format(Root.Data.Type))
                    if Root.Data.HasVarStoreId:
                        if "varid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "varid:  "
                                + Root.Dict["varid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "varid:  {} # Optional Input\n".format(
                                    "0x%04x" % (Info.VarStoreId)
                                )
                            )
                    f.write(ValueIndent + "guid:  " + self.PreProcessDB.GetKey(Info.Guid) + "\n")
                    if Root.Data.NameItemList != []:
                        f.write(ValueIndent + "nametable: \n")
                        for i in range(0, len(Root.Data.NameItemList)):
                            f.write(
                                ValueIndent
                                + " - name:  "
                                + "STRING_TOKEN("
                                + self.PreProcessDB.GetKey(Root.Data.NameItemList[i])
                                + ")\n"
                            )

                if Root.OpCode == EFI_IFR_DEFAULTSTORE_OP:
                    gVfrDefaultStore.UpdateDefaultType(Root)

                if Root.OpCode == EFI_IFR_SHOWN_DEFAULTSTORE_OP:
                    f.write(KeyIndent + "- defaultstore:\n")
                    f.write(ValueIndent + "type:  {}\n".format(Root.Data.Type))
                    f.write(
                        ValueIndent
                        + "prompt:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.DefaultName)
                        + ")\n"
                    )
                    if Root.Data.HasAttr:
                        f.write(
                            ValueIndent
                            + "attribute:  {} # Default ID, Optional input\n".format(
                                "0x%04x" % (Info.DefaultId)
                            )
                        )

                if Root.OpCode == EFI_IFR_FORM_OP:
                    f.write(KeyIndent + "- form: \n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    if "formid" in Root.Dict.keys():
                        f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                    else:
                        f.write(ValueIndent + "formid:  {} \n".format("0x%x" % Info.FormId))

                    f.write(
                        ValueIndent
                        + "title:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.FormTitle)
                        + ")\n"
                    )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_FORM_MAP_OP:
                    MethodMapList = Root.Data.GetMethodMapList()
                    f.write(KeyIndent + "- formmap: \n")
                    if "formid" in Root.Dict.keys():
                        f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                    else:
                        f.write(ValueIndent + "formid:  {} \n".format("0x%x" % Info.FormId))

                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    if MethodMapList != []:
                        f.write(ValueIndent + "map: # optional input\n")
                        for i in range(0, len(MethodMapList)):
                            f.write(
                                ValueIndent
                                + "- maptitle:  "
                                + "STRING_TOKEN("
                                + self.PreProcessDB.GetKey(Info.MethodMapList[i].MethodTitle)
                                + ")\n"
                            )
                            f.write(
                                ValueIndent
                                + "  mapguid:  "
                                + self.PreProcessDB.GetKey(Info.MethodMapList[i].MethodIdentifier)
                                + "\n"
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_IMAGE_OP:
                    f.write(
                        KeyIndent
                        + "- image: IMAGE_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Id)
                        + ")\n"
                    )

                if Root.OpCode == EFI_IFR_RULE_OP:  #
                    f.write(KeyIndent + "- rule:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(ValueIndent + "name:  {}\n".format(Root.Data.GetRuleName()))
                    f.write(ValueIndent + "expression:  {} \n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_SUBTITLE_OP:
                    f.write(KeyIndent + "- subtitle:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(
                        ValueIndent
                        + "text:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Statement.Prompt)
                        + ")\n"
                    )
                    if Root.Data.FlagsStream != "":
                        f.write(
                            ValueIndent
                            + "flags:  {}  # Optional Input\n".format(Root.Data.FlagsStream)
                        )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_TEXT_OP:
                    f.write(KeyIndent + "- text:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    if type(Info) == EFI_IFR_TEXT:
                        f.write(
                            ValueIndent
                            + "help:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Statement.Help)
                            + ")\n"
                        )
                        f.write(
                            ValueIndent
                            + "prompt:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Statement.Prompt)
                            + ")\n"
                        )
                        if Root.Data.HasTextTwo:
                            f.write(
                                ValueIndent
                                + "text:  "
                                + "STRING_TOKEN("
                                + self.PreProcessDB.GetKey(Info.TextTwo)
                                + ") # Optional Input\n"
                            )
                    if type(Info) == EFI_IFR_ACTION:
                        f.write(
                            ValueIndent
                            + "help:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Help)
                            + ")\n"
                        )
                        f.write(
                            ValueIndent
                            + "prompt:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Prompt)
                            + ")\n"
                        )
                        if Root.Data.FlagsStream != "":
                            f.write(
                                ValueIndent
                                + "flags:  {}  # Optional Input, Question Flags\n".format(
                                    Root.Data.FlagsStream
                                )
                            )
                        if Root.Data.HasKey:
                            if "key" in Root.Dict.keys():
                                f.write(
                                    ValueIndent
                                    + "key:  "
                                    + Root.Dict["key"].Key
                                    + " # Optional Input, Question QuestionId\n"
                                )
                            else:
                                f.write(
                                    ValueIndent
                                    + "key:  {}  # Optional Input, Question QuestionId\n".format(
                                        "0x%04x" % (Info.Question.QuestionId)
                                    )
                                )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ACTION_OP:
                    f.write(KeyIndent + "- action:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    f.write(
                        ValueIndent
                        + "config:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.QuestionConfig)
                        + ")\n"
                    )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ONE_OF_OP:
                    f.write(KeyIndent + "- oneof:\n")

                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)

                    if Root.Data.HasMinMax:
                        if "max" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "maximum:  "
                                + Root.Dict["max"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "maximum:  {} # Optional Input\n".format(
                                    "0x%0x" % (Info.Data.MaxValue)
                                )
                            )
                        if "min" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "minmum:  "
                                + Root.Dict["min"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "minimum:  {} # Optional Input\n".format(
                                    "0x%0x" % (Info.Data.MinValue)
                                )
                            )
                    if Root.Data.HasStep:
                        if "step" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "step:  "
                                + Root.Dict["step"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent + "step:  {} # Optional Input\n".format(Info.Data.Step)
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_ONE_OF_OPTION_OP:
                    f.write(KeyIndent + "- option:  \n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(
                        ValueIndent
                        + "text:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Option)
                        + ")\n"
                    )

                    if type(Root.Data) == IfrOneOfOption:
                        if Root.Data.ValueStream != "":
                            f.write(ValueIndent + "value:  {}\n".format(Root.Data.ValueStream))

                    if Root.Data.FlagsStream != "":
                        f.write(
                            ValueIndent
                            + "flags:  {} # Optional Input\n".format(Root.Data.FlagsStream)
                        )
                    if Root.Data.IfrOptionKey != None:
                        if "key" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "key:  "
                                + Root.Dict["key"].Key
                                + ") # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "key:  {} # Optional Input\n".format(
                                    "0x%04x" % (Root.Data.GetIfrOptionKey())
                                )
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DEFAULT_OP:
                    #ã€€specific condition here
                    if Root.Position != "Do not display":
                        f.write(KeyIndent + "- default:\n")
                        if Root.Condition != None:
                            f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))

                        if type(Root.Data) == IfrDefault:
                            Str = Root.Data.ValueStream
                            if Str.find(";") != -1:
                                RefList = Str.split(";")
                                Str = (
                                    RefList[0]
                                    + ";"
                                    + RefList[1]
                                    + ";"
                                    + self.PreProcessDB.GetKey(Info.Value[0].FormSetGuid)
                                    + ";"
                                    + "STRING_TOKEN"
                                    + "("
                                    + self.PreProcessDB.GetKey(Info.Value[0].DevicePath)
                                    + ")"
                                )

                            if Str != "":
                                Str = Str.replace("{", "[").replace("}", "]")
                                if (
                                    Str.find(":") != -1
                                    or Str.find("/") != -1
                                    or Str.find(";") != -1
                                ):
                                    Str = "(" + Str + ")"
                                f.write(ValueIndent + "value:  {}\n".format(Str))

                        elif type(Root.Data) == IfrDefault2:
                            f.write(
                                ValueIndent + "value_exp: '{}'\n".format(Root.Child[0].Expression)
                            )

                        if Root.Data.DefaultStore != "":
                            f.write(
                                ValueIndent + "defaultstore: {}\n".format(Root.Data.DefaultStore)
                            )

                if Root.OpCode == EFI_IFR_ORDERED_LIST_OP:
                    f.write(KeyIndent + "- orderedlist:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    if Root.Data.HasMaxContainers:
                        if "maxcontainers" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "maxcontainers:  "
                                + Root.Dict["maxcontainers"].Key
                                + ") # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "maxcontainers:  {} # Optional Input\n".format(Info.MaxContainers)
                            )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_NUMERIC_OP:
                    f.write(KeyIndent + "- numeric:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    if "max" in Root.Dict.keys():
                        f.write(ValueIndent + "maximum:  " + Root.Dict["max"].Key + "\n")
                    else:
                        f.write(
                            ValueIndent + "maximum:  {} \n".format("0x%0x" % (Info.Data.MaxValue))
                        )
                    if "min" in Root.Dict.keys():
                        f.write(ValueIndent + "minmum:  " + Root.Dict["min"].Key + "\n")
                    else:
                        f.write(
                            ValueIndent + "minimum:  {}\n".format("0x%0x" % (Info.Data.MinValue))
                        )
                    if Root.Data.HasStep:
                        if "step" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "step:  "
                                + Root.Dict["step"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent + "step:  {} # Optional Input\n".format(Info.Data.Step)
                            )

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_CHECKBOX_OP:
                    f.write(KeyIndent + "- checkbox:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_TIME_OP:
                    f.write(KeyIndent + "- time:\n")
                    if Root.Data.Hour == None:
                        self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                            f.write(ValueIndent + "component:  \n")
                    else:
                        f.write(ValueIndent + "hour:  {}\n".format(Root.Data.Hour))
                        if Root.Data.D_Hour != None:
                            f.write(ValueIndent + "default_hour:  {}\n".format(Root.Data.D_Hour))
                        f.write(ValueIndent + "minute:  {}\n".format(Root.Data.Minute))
                        if Root.Data.D_Minute != None:
                            f.write(ValueIndent + "default_minute:  {}\n".format(Root.Data.D_Minute))
                        f.write(ValueIndent + "second:  {}\n".format(Root.Data.Second))
                        if Root.Data.D_Second != None:
                            f.write(ValueIndent + "default_second:  {}\n".format(Root.Data.D_Second))
                        f.write(
                            ValueIndent
                            + "prompt:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Prompt)
                            + ")\n"
                        )
                        f.write(
                            ValueIndent
                            + "help:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Help)
                            + ")\n"
                        )
                        if Root.Data.FlagsStream != "":
                            f.write(
                                ValueIndent
                                + "flags:  {}  # Optional input , flags\n".format(
                                    Root.Data.FlagsStream
                                )
                            )
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_DEFAULT_OP:
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DATE_OP:
                    f.write(KeyIndent + "- date:\n")
                    if Root.Data.Year == None:
                        self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                            f.write(ValueIndent + "component:  \n")
                    else:
                        f.write(ValueIndent + "year:  {}\n".format(Root.Data.Year))
                        f.write(ValueIndent + "min_year:  {}\n".format(Root.Data.Min))
                        f.write(ValueIndent + "max_year:  {}\n".format(Root.Data.Max))
                        if Root.Data.D_Year != None:
                            f.write(ValueIndent + "default_year:  {}\n".format(Root.Data.D_Year))
                        f.write(ValueIndent + "month:  " + Root.Data.Month + "\n")
                        if Root.Data.D_Month != None:
                            f.write(ValueIndent + "default_month:  {}\n".format(Root.Data.D_Month))
                        f.write(ValueIndent + "day:  " + Root.Data.Day + "\n")
                        if Root.Data.D_Day != None:
                            f.write(ValueIndent + "default_day:  {}\n".format(Root.Data.D_Day))
                        f.write(
                            ValueIndent
                            + "prompt:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Prompt)
                            + ")\n"
                        )
                        f.write(
                            ValueIndent
                            + "help:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Question.Header.Help)
                            + ")\n"
                        )
                        if Root.Data.FlagsStream != "":
                            f.write(
                                ValueIndent
                                + "flags:  {}  # Optional input , flags\n".format(
                                    Root.Data.FlagsStream
                                )
                            )
                        if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_DEFAULT_OP:
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_STRING_OP:
                    f.write(KeyIndent + "- string:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    if "minsize" in Root.Dict.keys():
                        f.write(ValueIndent + "minsize:  " + Root.Dict["minsize"].Key + "\n")
                    else:
                        f.write(ValueIndent + "minsize:  {} \n".format(Info.MinSize))
                    if "maxsize" in Root.Dict.keys():
                        f.write(ValueIndent + "maxsize:  " + Root.Dict["maxsize"].Key + "\n")
                    else:
                        f.write(ValueIndent + "maxsize:  {} \n".format(Info.MaxSize))
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_PASSWORD_OP:
                    f.write(KeyIndent + "- password:\n")
                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)
                    if "minsize" in Root.Dict.keys():
                        f.write(ValueIndent + "minsize:  " + Root.Dict["minsize"].Key + "\n")
                    else:
                        f.write(ValueIndent + "minsize:  {} \n".format(Info.MinSize))
                    if "maxsize" in Root.Dict.keys():
                        f.write(ValueIndent + "maxsize:  " + Root.Dict["maxsize"].Key + "\n")
                    else:
                        f.write(ValueIndent + "maxsize:  {} \n".format(Info.MaxSize))
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_RESET_BUTTON_OP:
                    f.write(KeyIndent + "- resetbutton:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(ValueIndent + "defaultstore:  {}\n".format(Root.Data.DefaultStore))
                    f.write(
                        ValueIndent
                        + "prompt:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Statement.Prompt)
                        + ")\n"
                    )
                    f.write(
                        ValueIndent
                        + "help:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Statement.Help)
                        + ")\n"
                    )
                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_REF_OP:
                    f.write(KeyIndent + "- goto:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))

                    if type(Root.Data) == IfrRef4:
                        f.write(
                            ValueIndent
                            + "devicepath:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.DevicePath)
                            + ") # Optional Input\n"
                        )
                        f.write(
                            ValueIndent
                            + "formsetguid:  "
                            + self.PreProcessDB.GetKey(Info.FormSetId)
                            + " # Optional Input\n"
                        )
                        if "formid" in Root.Dict.keys():
                            f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                        else:
                            f.write(ValueIndent + "formid:  {}\n".format("0x%x" % (Info.FormId)))
                        if "questionid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "question:  "
                                + Root.Dict["questionid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "question:  {} # Optional Input\n".format(
                                    "0x%x" % Info.QuestionId
                                )
                            )

                    if type(Root.Data) == IfrRef3:
                        f.write(
                            ValueIndent
                            + "formsetguid:  "
                            + self.PreProcessDB.GetKey(Info.FormSetId)
                            + " # Optional Input\n"
                        )
                        if "formid" in Root.Dict.keys():
                            f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                        else:
                            f.write(ValueIndent + "formid:  {}\n".format("0x%x" % (Info.FormId)))
                        if "questionid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "question:  "
                                + Root.Dict["questionid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "question:  {} # Optional Input\n".format(
                                    "0x%x" % Info.QuestionId
                                )
                            )

                    if type(Root.Data) == IfrRef2:
                        if "formid" in Root.Dict.keys():
                            f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                        else:
                            f.write(ValueIndent + "formid:  {}\n".format("0x%x" % (Info.FormId)))
                        if "questionid" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "question:  "
                                + Root.Dict["questionid"].Key
                                + " # Optional Input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "question:  {} # Optional Input\n".format(
                                    "0x%x" % Info.QuestionId
                                )
                            )

                    if type(Root.Data) == IfrRef:
                        if "formid" in Root.Dict.keys():
                            f.write(ValueIndent + "formid:  " + Root.Dict["formid"].Key + "\n")
                        else:
                            f.write(ValueIndent + "formid:  {}\n".format("0x%x" % (Info.FormId)))

                    self._DumpQuestionInfosWithUni(Root, f, ValueIndent)

                    if Root.Child != [] and Root.Child[0].OpCode != EFI_IFR_END_OP:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_REFRESH_OP:
                    f.write(KeyIndent + "- refresh:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    if "interval" in Root.Dict.keys():
                        f.write(ValueIndent + "interval:  " + Root.Dict["interval"].Key + "\n")
                    else:
                        f.write(
                            ValueIndent
                            + "interval:  {}  # RefreshInterval\n".format(Info.RefreshInterval)
                        )

                if Root.OpCode == EFI_IFR_VARSTORE_DEVICE_OP:
                    f.write(KeyIndent + "- varstoredevice:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    if "devicepath" in Root.Dict.keys():
                        f.write(ValueIndent + "devicepath:  " + Root.Dict["devicepath"].Key + "\n")
                    else:
                        f.write(
                            ValueIndent + "devicepath:  {}  # DevicePath\n".format(Info.DevicePath)
                        )

                if Root.OpCode == EFI_IFR_REFRESH_ID_OP:
                    f.write(KeyIndent + "- refreshguid:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(
                        ValueIndent
                        + "guid:  "
                        + self.PreProcessDB.GetKey(Info.RefreshEventGroupId)
                        + "\n"
                    )

                if Root.OpCode == EFI_IFR_WARNING_IF_OP:
                    f.write(KeyIndent + "- warningif:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(
                        ValueIndent
                        + "prompt:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Warning)
                        + ")\n"
                    )
                    if Root.Data.HasTimeOut:
                        if "timeout" in Root.Dict.keys():
                            f.write(
                                ValueIndent
                                + "timeout:  "
                                + Root.Dict["timeout"].Key
                                + " # optional input\n"
                            )
                        else:
                            f.write(
                                ValueIndent
                                + "timeout:  {} # optional input \n".format(Info.TimeOut)
                            )
                    f.write(ValueIndent + "expression:  {}\n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_GUID_OP:
                    if type(Root.Data) == IfrLabel:
                        f.write(KeyIndent + "- label:\n")
                        if Root.Condition != None:
                            f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                        if "label" in Root.Dict.keys():
                            f.write(ValueIndent + "number:  " + Root.Dict["label"].Key + "\n")
                        else:
                            f.write(
                                ValueIndent
                                + "number:  {}  # Number\n".format("0x%x" % (Info.Number))
                            )

                    if type(Root.Data) == IfrBanner:
                        f.write(KeyIndent + "- banner:\n")
                        if Root.Condition != None:
                            f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                        f.write(
                            ValueIndent
                            + "title:  "
                            + "STRING_TOKEN("
                            + self.PreProcessDB.GetKey(Info.Title)
                            + ")\n"
                        )
                        if not Root.Data.HasTimeOut:
                            if "line" in Root.Dict.keys():
                                f.write(ValueIndent + "line:  " + Root.Dict["line"].Key + "\n")
                            else:
                                f.write(ValueIndent + "line:  {}\n".format(Info.LineNumber))
                            f.write(ValueIndent + "align:  " + Root.Dict["align"].Key + "\n")
                        else:
                            f.write(ValueIndent + "timeout:  {}\n".format(Root.Data.TimeOut))

                    if type(Root.Data) == IfrClass:
                        f.write(KeyIndent + "class:  " + Root.Data.ClassStr + "\n")
                        if not Root.Data.HasSubClass:
                            f.write(KeyIndent + "component:  \n")

                    if type(Root.Data) == IfrSubClass:
                        f.write(KeyIndent + "subclass:  " + Root.Data.SubClassStr + "\n")
                        f.write(KeyIndent + "component:  \n")

                    if type(Root.Data) == IfrExtensionGuid:
                        if type(Root.Parent.Data) == IfrExtensionGuid:
                            Root.Level -= 1
                            KeyIndent = " " * ((Root.Level * 2 - 1) * 2)
                            ValueIndent = " " * ((Root.Level * 2 + 1) * 2)
                        f.write(KeyIndent + "- guidop:\n")
                        if Root.Condition != None:
                            f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                        f.write(
                            ValueIndent + "guid:  " + self.PreProcessDB.GetKey(Info.Guid) + "\n"
                        )
                        if Root.Data.GetDataType() != "":
                            f.write(ValueIndent + "{}: \n".format(Root.Data.GetDataType()))
                            for data in Root.Data.GetFieldList():
                                f.write(
                                    ValueIndent + "  {}:  {}\n".format(data[0], "0x%x" % (data[1]))
                                )

                if Root.OpCode == EFI_IFR_NO_SUBMIT_IF_OP:
                    f.write(KeyIndent + "- nosubmitif:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(
                        ValueIndent
                        + "prompt:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Error)
                        + ")\n"
                    )
                    if Root.Data.FlagsStream != "":
                        f.write(ValueIndent + "flags:  " + Root.Data.FlagsStream + "\n")
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_READ_OP:
                    f.write(KeyIndent + "- read:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_WRITE_OP:
                    f.write(KeyIndent + "- write:\n")
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_VALUE_OP and Root.Parent.OpCode != EFI_IFR_DEFAULT_OP:  #
                    f.write(KeyIndent + "- value:\n")
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))

                if Root.OpCode == EFI_IFR_MODAL_TAG_OP:
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(KeyIndent + "- modal: null\n")

                if Root.OpCode == EFI_IFR_LOCKED_OP:
                    if Root.Condition != None:
                        f.write(ValueIndent + "condition:  '{}'\n".format(Root.Condition))
                    f.write(KeyIndent + "- locked: null\n")

                if Root.OpCode == EFI_IFR_SUPPRESS_IF_OP:
                    f.write(KeyIndent + "- suppressif:\n")
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))
                    if len(Root.Child) > 2 and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_DISABLE_IF_OP:
                    # If the disable node is inserted after the formset ends, do not show it in source yml
                    # use the expression content to tell if the  disable node is inserted after the formset ends
                    if Root.Expression != None:
                        f.write(KeyIndent + "- disableif:\n")
                        f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))
                        if (
                            len(Root.Child) > 2
                            and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps
                        ):
                            f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_GRAY_OUT_IF_OP:
                    f.write(KeyIndent + "- grayoutif:\n")
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))
                    if len(Root.Child) > 2 and Root.Child[len(Root.Child) - 2].OpCode not in ExpOps:
                        f.write(ValueIndent + "component:  \n")

                if Root.OpCode == EFI_IFR_INCONSISTENT_IF_OP:
                    f.write(KeyIndent + "- inconsistentif:\n")
                    f.write(ValueIndent + "expression:  '{}'\n".format(Root.Expression))
                    f.write(
                        ValueIndent
                        + "prompt:  "
                        + "STRING_TOKEN("
                        + self.PreProcessDB.GetKey(Info.Error)
                        + ")\n"
                    )
                    if Root.Data.FlagsStream != "":
                        f.write(ValueIndent + "flags:  " + Root.Data.FlagsStream + "\n")
            self.LastOp = Root.OpCode

        except:
            EdkLogger.error(
                "VfrCompiler",
                FILE_WRITE_FAILURE,
                "File write failed for %s" % (self.Options.YamlFileName),
                None,
            )

        if Root.Child != []:
            for ChildNode in Root.Child:
                if Root.OpCode in ConditionOps:
                    ChildNode.Level = Root.Level + 1
                else:
                    if type(Root.Data) == IfrGuid and (
                        ChildNode.OpCode
                        in [EFI_IFR_CHECKBOX_OP, EFI_IFR_NUMERIC_OP, EFI_IFR_ONE_OF_OP]
                    ):
                        ChildNode.Level = Root.Level
                    else:
                        ChildNode.Level = Root.Level + 1

                self._DumpYamlDfsWithUni(ChildNode, f)

        return
